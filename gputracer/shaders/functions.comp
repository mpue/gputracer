#version 450
uniform float iTime;
uniform vec3 iMouse;

layout(local_size_x = 16, local_size_y = 16) in;
layout(rgba8, binding = %BINDING_UNIT%) uniform image2D outputImage;

layout(binding = 1) uniform FragUBO {
  mat4 invProjectionView;
  float near;
  float far;
}
camera;

float DistanceToLineSegment(vec2 p0, vec2 p1, vec2 p)
{
    float distanceP0 = length(p0 - p);
    float distanceP1 = length(p1 - p);
    
    float l2 =pow(length(p0 - p1), 2.);
    float t = max(0., min(1., dot(p - p0, p1 - p0) / l2));
    vec2 projection = p0 + t * (p1 - p0); 
    float distanceToProjection = length(projection - p);
    
    return min(min(distanceP0, distanceP1), distanceToProjection);
}

float Function(float x)
{
    x = x * 8.;

    return sin(2.*x) * .25  + 0.5;
}

float DistanceToFunction(vec2 p, float xDelta)
{
    float result = 100.;
    
    for (float i = -3.; i < 3.; i += 1.)
    {
        vec2 q = p;
        q.x += xDelta * i;
        
        vec2 p0 = vec2(q.x, Function(q.x));
    	vec2 p1 = vec2(q.x + xDelta, Function(q.x + xDelta));
        result = min(result, DistanceToLineSegment(p0, p1, p));
    }

    return result;
}

void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    vec2 iResolution = imageSize(outputImage);
    vec2 uv = fragCoord / iResolution.y;

    float distanceToPlot = DistanceToFunction(uv, 1. / iResolution.x);
    float intensity = smoothstep(0., 1., 1. - distanceToPlot * 1. * iResolution.y);
    intensity = pow(intensity,1./2.2);
    
    vec3 col = vec3(intensity);

    fragColor = vec4(col,1.0);
}
void main() {
  ivec2 pixelCoords = ivec2(gl_GlobalInvocationID.xy);
  ivec2 dims = imageSize(outputImage); // fetch image dimensions

  vec2 texCoord = vec2(float(pixelCoords.x) / float(dims.x),
                       float(pixelCoords.y) / float(dims.y));
  
  vec4 outColor;

  mainImage(outColor,gl_GlobalInvocationID.xy);
  imageStore(outputImage, pixelCoords, outColor);
}



