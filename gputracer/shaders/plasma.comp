
#version 450

layout(local_size_x = 16, local_size_y = 16) in;
layout(rgba8, binding = 3) uniform image2D outputImage;

layout(binding = 1) uniform FragUBO {
  mat4 invProjectionView;
  float near;
  float far;
}
ubo;

uniform float iTime;
uniform float speed;

void main() {
  ivec2 pixelCoords = ivec2(gl_GlobalInvocationID.xy);
  ivec2 dims = imageSize(outputImage); // fetch image dimensions

  vec2 texCoord = vec2(float(pixelCoords.x) / float(dims.x),
                       float(pixelCoords.y) / float(dims.y));
  

  //  Normalized Device Coordinates (NDC)
  vec2 ndc = (2.0 * texCoord - 1.0);
  float ndcDepth = ubo.far - ubo.near;
  float ndcSum = ubo.far + ubo.near;

  vec3 color = vec3(0);

	float scale = 0.01;
	float time = iTime * 100.0;
	float r1 = 0.4 ; 
	float r2 = 0.9 ; 
	float r3 = 0.29; 
	float x = pixelCoords.x;
	float y = pixelCoords.y;
	float h = dims.y;
	float w = dims.x;
            
	time = iTime * speed;

	float col = 
		sin(distance( vec2(x * r1 + time, y * r2), vec2(w / r3 , h) ) * scale) +
		sin(distance( vec2(x, y * r2), vec2(1.0 / h * r3, w * r1) ) * scale) +
		sin(distance( vec2(r3 * x + time, r1 * y + time), vec2(w * r2 + h * r1, h * r2) ) * scale) +
		sin(distance( vec2(1.0 / x * r3 , y * r2), vec2(h, w) ) * scale);    
            
	color += normalize(vec3( 0.5 + 0.5 * sin(col), cos(col), cos(col) - sin(col)) + 0.1) * 0.5;
	color += mod(float(pixelCoords.x), 2.0) < 1.0 ? 0.0 : 0.4;       

  imageStore(outputImage, pixelCoords, vec4(color, 1));
}
