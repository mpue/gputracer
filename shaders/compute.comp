#version 450

uniform float iTime;
uniform vec3 iMouse;

layout(local_size_x = 16, local_size_y = 16) in;
layout(rgba8, binding = %BINDING_UNIT%) uniform image2D outputImage;

layout(binding = 1) uniform FragUBO {
  mat4 invProjectionView;
  float near;
  float far;
}
ubo;



#define H(a) (cos(radians(vec3(-10, 60, 120))+(a)*6.2832)*.5+.5)  // hue
void mainImage( out vec4 C, in vec2 U)
{
    vec2 iResolution = imageSize(outputImage);
    float i, z;
    vec2 R = iResolution.xy,
         o = (U+U-R)/R.y,
         m = (iMouse.xy - R/2.)/R.y*5. + iTime/10.,
         u, g;
    vec3 c = vec3(0);
    for(i = 0.; i < 1.; i += .01)
    {
        u = o*i;
        z = max(1. - dot(u, u), 0.);
        u /= .1 + sqrt(z)*.3;
        u.x = u.x/.866 - m.x;
        u.y += fract(ceil(u.x)*.5) - m.y;
        g = abs(fract(u) - .5);
        c += H(i) / 250. * z / (abs(max(g.x*1.5 + g, g+g).y - 1.) + .1 - i*.08);
    }
    C = vec4(tanh(c*c), 1);
}

void main() {
  

  ivec2 pixelCoords = ivec2(gl_GlobalInvocationID.xy);
  ivec2 dims = imageSize(outputImage); // fetch image dimensions

  vec2 texCoord = vec2(float(pixelCoords.x) / float(dims.x),
                       float(pixelCoords.y) / float(dims.y));
  
  vec4 outColor;

  mainImage(outColor,gl_GlobalInvocationID.xy);
  imageStore(outputImage, pixelCoords, outColor);
}

